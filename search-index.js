var N = null;var searchIndex = {};
searchIndex["askama"]={"doc":"Askama implements a type-safe compiler for Jinja-like templates. It lets you write templates in a Jinja-like syntax, which are linked to a `struct` defining the template context. This is done using a custom derive implementation (implemented in `askama_derive`).","items":[[0,"filters","askama","Module for built-in filter functions",N,N],[17,"BUILT_IN_FILTERS","askama::filters","",N,N],[5,"safe","","Marks a string (or other `Display` type) as safe",N,[[["i"]],["result",["markupdisplay","error"]]]],[5,"escape","","Escapes `&`, `<` and `>` in strings",N,[[["i"]],["result",["markupdisplay","error"]]]],[5,"e","","Alias for the `escape()` filter",N,[[["i"]],["result",["markupdisplay","error"]]]],[5,"format","","Formats arguments according to the specified format",N,N],[5,"linebreaks","","Replaces line breaks in plain text with appropriate HTML",N,[[["display"]],["result",["string","error"]]]],[5,"linebreaksbr","","Converts all newlines in a piece of plain text to HTML line breaks",N,[[["display"]],["result",["string","error"]]]],[5,"lower","","Converts to lowercase",N,[[["display"]],["result",["string","error"]]]],[5,"lowercase","","Alias for the `lower()` filter",N,[[["display"]],["result",["string","error"]]]],[5,"upper","","Converts to uppercase",N,[[["display"]],["result",["string","error"]]]],[5,"uppercase","","Alias for the `upper()` filter",N,[[["display"]],["result",["string","error"]]]],[5,"trim","","Strip leading and trailing whitespace",N,[[["display"]],["result",["string","error"]]]],[5,"truncate","","Limit string length, appends '...' if truncated",N,[[["display"],["usize"]],["result",["string","error"]]]],[5,"join","","Joins iterable into a string separated by provided argument",N,[[["i"],["s"]],["result",["string","error"]]]],[5,"abs","","Absolute value",N,[[["t"]],["result",["error"]]]],[5,"capitalize","","Capitalize a value. The first character will be uppercase, all others lowercase.",N,[[["display"]],["result",["string","error"]]]],[5,"center","","Centers the value in a field of a given width",N,[[["display"],["usize"]],["result",["string","error"]]]],[5,"wordcount","","Count the words in that string",N,[[["display"]],["result",["usize","error"]]]],[5,"read_config_file","askama","",N,[[],["string"]]],[4,"Error","","askama error type",N,N],[13,"Fmt","","formatting error",0,N],[4,"MarkupDisplay","","",N,N],[13,"Safe","","",1,N],[13,"Unsafe","","",1,N],[6,"Result","","",N,N],[5,"rerun_if_templates_changed","","Build script helper to rebuild crates if contained templates have changed",N,[[]]],[8,"Template","","Main `Template` trait; implementations are generally derived",N,N],[11,"render","","Helper method which allocates a new `String` and renders into it",2,[[["self"]],["result",["string"]]]],[10,"render_into","","Renders the template to the given `writer` buffer",2,[[["self"],["write"]],["result"]]],[10,"extension","","Helper method to inspect the template's extension",2,[[["self"]],["option",["str"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"from","","",1,[[["t"]],["markupdisplay"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",1,[[["self"],["markupdisplay"]],["bool"]]],[11,"ne","","",1,[[["self"],["markupdisplay"]],["bool"]]],[11,"mark_safe","","",1,[[["self"]],["markupdisplay"]]],[11,"unsafe_string","","",1,[[["self"]],["string"]]]],"paths":[[4,"Error"],[4,"MarkupDisplay"],[8,"Template"]]};
searchIndex["finchers_template"]={"doc":"Template support for Finchers","items":[[3,"Renderer","finchers_template","A struct which renders a context value to an HTTP response using the specified template engine.",N,N],[5,"askama","","",N,[[],["renderer",["askamaengine"]]]],[5,"handlebars","","",N,N],[5,"horrorshow","","",N,[[],["renderer",["horrorshowengine"]]]],[5,"tera","","",N,N],[0,"backend","","",N,N],[3,"AskamaEngine","finchers_template::backend","",N,N],[3,"HandlebarsEngine","","",N,N],[3,"HorrorshowEngine","","",N,N],[3,"TeraEngine","","",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["self"]]],[11,"precompute_content_type","","Precompute the value of content-type by using the given instance of context.",0,[[["self"],["ctxt"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","",1,N],[11,"set_template_name","","",1,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"default","","",2,[[],["horrorshowengine"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"new","","",3,N],[11,"set_template_name","","",3,N],[8,"Engine","","A trait representing a template engine.",N,N],[8,"AsHandlebars","","",N,N],[10,"as_handlebars","","",4,[[["self"]],["handlebars"]]],[8,"AsTera","","",N,N],[10,"as_tera","","",5,[[["self"]],["tera"]]],[11,"fmt","finchers_template","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Renderer` from the specified engine.",6,[[["eng"]],["renderer"]]],[11,"engine","","Returns a reference to the inner template engine.",6,[[["self"]],["eng"]]],[11,"engine_mut","","Returns a mutable reference to the inner template engine.",6,[[["self"]],["eng"]]],[11,"content_type","","Sets the value of content-type used in the rendered HTTP responses.",6,[[["self"],["mime"]],["renderer"]]],[11,"wrap","","",6,N]],"paths":[[3,"AskamaEngine"],[3,"HandlebarsEngine"],[3,"HorrorshowEngine"],[3,"TeraEngine"],[8,"AsHandlebars"],[8,"AsTera"],[3,"Renderer"]]};
searchIndex["handlebars"]={"doc":"Handlebars","items":[[3,"Context","handlebars","The context wrap data you render on your templates.",N,N],[3,"RenderError","","Error when rendering data on template.",N,N],[12,"desc","","",0,N],[12,"template_name","","",0,N],[12,"line_no","","",0,N],[12,"column_no","","",0,N],[3,"TemplateError","","Error on parsing template.",N,N],[12,"reason","","",1,N],[12,"template_name","","",1,N],[12,"line_no","","",1,N],[12,"column_no","","",1,N],[3,"Handlebars","","The single entry point of your Handlebars templates",N,N],[3,"Decorator","","",N,N],[3,"Helper","","",N,N],[3,"RenderContext","","The context of a render call",N,N],[3,"StringWriter","","",N,N],[3,"PathAndJson","","Json wrapper that holds the Json value and reference path information",N,N],[4,"TemplateFileError","","",N,N],[13,"TemplateError","","",2,N],[13,"IOError","","",2,N],[4,"TemplateRenderError","","",N,N],[13,"TemplateError","","",3,N],[13,"RenderError","","",3,N],[13,"IOError","","",3,N],[4,"ScopedJson","","A JSON wrapper designed for handlebars internal use case",N,N],[13,"Constant","","",4,N],[13,"Derived","","",4,N],[13,"Context","","",4,N],[5,"html_escape","","The default escape fn replaces the characters `&\"<>` with the equivalent html / xml entities.",N,[[["str"]],["string"]]],[5,"no_escape","","`EscapeFn` that do not change any thing. Useful when using in a non-html environment.",N,[[["str"]],["string"]]],[5,"to_json","","",N,[[["t"]],["json"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["context"]]],[11,"null","","Create a context with null data",5,[[],["context"]]],[11,"wraps","","Create a context with given data",5,[[["t"]],["result",["context","rendererror"]]]],[11,"navigate","","Navigate the context with base path and relative path Typically you will set base path to `RenderContext.get_path()` and set relative path to helper argument or so.",5,[[["self"],["str"],["vecdeque"],["str"]],["result",["option","rendererror"]]]],[11,"data","","",5,[[["self"]],["json"]]],[11,"data_mut","","",5,[[["self"]],["json"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"from","","",0,[[["ioerror"]],["rendererror"]]],[11,"from","","",0,[[["serdeerror"]],["rendererror"]]],[11,"from","","",0,[[["fromutf8error"]],["rendererror"]]],[11,"new","","",0,[[["t"]],["rendererror"]]],[11,"with","","",0,[[["e"]],["rendererror"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["templateerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["templateerror"]],["bool"]]],[11,"of","","",1,[[["templateerrorreason"]],["templateerror"]]],[11,"at","","",1,[[["self"],["str"],["usize"],["usize"]],["templateerror"]]],[11,"in_template","","",1,[[["self"],["string"]],["templateerror"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["error"]]]],[11,"from","","",2,[[["templateerror"]],["templatefileerror"]]],[11,"from","","",2,[[["walkdirerror"]],["templatefileerror"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"cause","","",3,[[["self"]],["option",["error"]]]],[11,"from","","",3,[[["templateerror"]],["templaterendererror"]]],[11,"from","","",3,[[["rendererror"]],["templaterendererror"]]],[11,"as_render_error","","",3,[[["self"]],["option",["rendererror"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"default","","",6,[[],["self"]]],[11,"new","","",6,[[],["registry"]]],[11,"source_map_enabled","","Enable handlebars template source map",6,[[["self"],["bool"]]]],[11,"set_strict_mode","","Enable handlebars strict mode",6,[[["self"],["bool"]]]],[11,"strict_mode","","Return strict mode state, default is false.",6,[[["self"]],["bool"]]],[11,"register_template_string","","Register a template string",6,[[["self"],["str"],["s"]],["result",["templateerror"]]]],[11,"register_partial","","Register a partial string",6,[[["self"],["str"],["s"]],["result",["templateerror"]]]],[11,"register_template_file","","Register a template from a path",6,[[["self"],["str"],["p"]],["result",["templatefileerror"]]]],[11,"register_templates_directory","","Register templates from a directory",6,[[["self"],["str"],["p"]],["result",["templatefileerror"]]]],[11,"register_template_source","","Register a template from `std::io::Read` source",6,[[["self"],["str"],["read"]],["result",["templatefileerror"]]]],[11,"unregister_template","","remove a template from the registry",6,[[["self"],["str"]]]],[11,"register_helper","","register a helper",6,[[["self"],["str"],["box",["helperdef"]]],["option",["box"]]]],[11,"register_decorator","","register a decorator",6,[[["self"],["str"],["box",["directivedef"]]],["option",["box"]]]],[11,"register_escape_fn","","Register a new escape fn to be used from now on by this registry.",6,[[["self"],["f"]]]],[11,"unregister_escape_fn","","Restore the default escape fn.",6,[[["self"]]]],[11,"get_escape_fn","","Get a reference to the current escape fn.",6,[[["self"]],["fn"]]],[11,"has_template","","Return `true` if a template is registered for the given name",6,[[["self"],["str"]],["bool"]]],[11,"get_template","","Return a registered template,",6,[[["self"],["str"]],["option",["template"]]]],[11,"get_helper","","Return a registered helper",6,[[["self"],["str"]],["option",["box"]]]],[11,"get_decorator","","Return a registered directive, aka decorator",6,[[["self"],["str"]],["option",["box"]]]],[11,"get_templates","","Return all templates registered",6,[[["self"]],["hashmap"]]],[11,"clear_templates","","Unregister all templates",6,[[["self"]]]],[11,"render","","Render a registered template with some data into a string",6,[[["self"],["str"],["t"]],["result",["string","rendererror"]]]],[11,"render_to_write","","Render a registered template and write some data to the `std::io::Write`",6,[[["self"],["str"],["t"],["w"]],["result",["rendererror"]]]],[11,"render_template","","render a template string using current registry without register it",6,[[["self"],["str"],["t"]],["result",["string","templaterendererror"]]]],[11,"render_template_to_write","","render a template string using current registry without register it",6,[[["self"],["str"],["t"],["w"]],["result",["templaterendererror"]]]],[11,"render_template_source_to_write","","render a template source using current registry without register it",6,[[["self"],["read"],["t"],["w"]],["result",["templaterendererror"]]]],[11,"clone","","",7,[[["self"]],["rendercontext"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a render context from a `Write`",7,[[["option",["string"]]],["rendercontext"]]],[11,"derive","","",7,[[["self"]],["rendercontext"]]],[11,"new_for_block","","",7,[[["self"]],["rendercontext"]]],[11,"context","","",7,[[["self"]],["option",["rc"]]]],[11,"set_context","","",7,[[["self"],["context"]]]],[11,"evaluate","","",7,[[["self"],["context"],["str"],["bool"]],["result",["json","rendererror"]]]],[11,"evaluate_absolute","","",7,[[["self"],["context"],["str"],["bool"]],["result",["json","rendererror"]]]],[11,"get_partial","","",7,[[["self"],["str"]],["option",["template"]]]],[11,"set_partial","","",7,[[["self"],["string"],["template"]]]],[11,"set_local_var","","",7,[[["self"],["string"],["json"]]]],[11,"clear_local_vars","","",7,[[["self"]]]],[11,"promote_local_vars","","",7,[[["self"]]]],[11,"demote_local_vars","","",7,[[["self"]]]],[11,"get_local_var","","",7,[[["self"],["str"]],["option",["json"]]]],[11,"is_current_template","","",7,[[["self"],["str"]],["bool"]]],[11,"register_local_helper","","",7,[[["self"],["str"],["box",["helperdef"]]],["option",["rc"]]]],[11,"unregister_local_helper","","",7,[[["self"],["str"]]]],[11,"get_local_helper","","",7,[[["self"],["str"]],["option",["rc"]]]],[11,"get_current_template_name","","",7,[[["self"]],["option",["string"]]]],[11,"set_current_template_name","","",7,[[["self"],["option",["string"]]]]],[11,"get_root_template_name","","",7,[[["self"]],["option",["string"]]]],[11,"set_root_template_name","","",7,[[["self"],["option",["string"]]]]],[11,"is_disable_escape","","",7,[[["self"]],["bool"]]],[11,"set_disable_escape","","",7,[[["self"],["bool"]]]],[11,"get_path","","",7,[[["self"]],["string"]]],[11,"set_path","","",7,[[["self"],["string"]]]],[11,"get_local_path_root","","",7,[[["self"]],["vecdeque"]]],[11,"push_local_path_root","","",7,[[["self"],["string"]]]],[11,"pop_local_path_root","","",7,[[["self"]]]],[11,"push_block_context","","",7,[[["self"],["t"]],["result",["rendererror"]]]],[11,"pop_block_context","","",7,[[["self"]]]],[11,"evaluate_in_block_context","","",7,[[["self"],["str"]],["result",["option","rendererror"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"name","","Returns helper name",8,[[["self"]],["str"]]],[11,"params","","Returns all helper params, resolved within the context",8,[[["self"]],["vec"]]],[11,"param","","Returns nth helper param, resolved within the context.",8,[[["self"],["usize"]],["option",["pathandjson"]]]],[11,"hash","","Returns hash, resolved within the context",8,[[["self"]],["btreemap"]]],[11,"hash_get","","Return hash value of a given key, resolved within the context",8,[[["self"],["str"]],["option",["pathandjson"]]]],[11,"template","","Returns the default inner template if the helper is a block helper.",8,[[["self"]],["option",["template"]]]],[11,"inverse","","Returns the template of `else` branch if any",8,[[["self"]],["option",["template"]]]],[11,"is_block","","Returns if the helper is a block one `{{#helper}}{{/helper}}` or not `{{helper 123}}`",8,[[["self"]],["bool"]]],[11,"block_param","","Returns block param if any",8,[[["self"]],["option",["str"]]]],[11,"block_param_pair","","Return block param pair (for example |key, val|) if any",8,[[["self"]],["option"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"name","","Returns helper name",9,[[["self"]],["string"]]],[11,"params","","Returns all helper params, resolved within the context",9,[[["self"]],["vec"]]],[11,"param","","Returns nth helper param, resolved within the context",9,[[["self"],["usize"]],["option",["pathandjson"]]]],[11,"hash","","Returns hash, resolved within the context",9,[[["self"]],["btreemap"]]],[11,"hash_get","","Return hash value of a given key, resolved within the context",9,[[["self"],["str"]],["option",["pathandjson"]]]],[11,"template","","Returns the default inner template if any",9,[[["self"]],["option",["template"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"default","","",10,[[],["self"]]],[11,"new","","",10,[[],["stringwriter"]]],[11,"into_string","","",10,[[["self"]],["string"]]],[11,"write","","",10,N],[11,"flush","","",10,[[["self"]],["result"]]],[0,"template","","",N,N],[3,"TemplateMapping","handlebars::template","",N,N],[12,"0","","",11,N],[12,"1","","",11,N],[3,"Template","","A handlebars template",N,N],[12,"name","","",12,N],[12,"elements","","",12,N],[12,"mapping","","",12,N],[3,"Subexpression","","",N,N],[12,"element","","",13,N],[3,"ExpressionSpec","","",N,N],[12,"name","","",14,N],[12,"params","","",14,N],[12,"hash","","",14,N],[12,"block_param","","",14,N],[12,"omit_pre_ws","","",14,N],[12,"omit_pro_ws","","",14,N],[3,"HelperTemplate","","",N,N],[12,"name","","",15,N],[12,"params","","",15,N],[12,"hash","","",15,N],[12,"block_param","","",15,N],[12,"template","","",15,N],[12,"inverse","","",15,N],[12,"block","","",15,N],[3,"DirectiveTemplate","","",N,N],[12,"name","","",16,N],[12,"params","","",16,N],[12,"hash","","",16,N],[12,"template","","",16,N],[4,"BlockParam","","",N,N],[13,"Single","","",17,N],[13,"Pair","","",17,N],[4,"Parameter","","",N,N],[13,"Name","","",18,N],[13,"Literal","","",18,N],[13,"Subexpression","","",18,N],[4,"TemplateElement","","",N,N],[13,"RawString","","",19,N],[13,"Expression","","",19,N],[13,"HTMLExpression","","",19,N],[13,"HelperExpression","","",19,N],[13,"HelperBlock","","",19,N],[13,"DirectiveExpression","","",19,N],[13,"DirectiveBlock","","",19,N],[13,"PartialExpression","","",19,N],[13,"PartialBlock","","",19,N],[13,"Comment","","",19,N],[11,"eq","","",11,[[["self"],["templatemapping"]],["bool"]]],[11,"ne","","",11,[[["self"],["templatemapping"]],["bool"]]],[11,"clone","","",11,[[["self"]],["templatemapping"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["template"]],["bool"]]],[11,"ne","","",12,[[["self"],["template"]],["bool"]]],[11,"clone","","",12,[[["self"]],["template"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["subexpression"]],["bool"]]],[11,"ne","","",13,[[["self"],["subexpression"]],["bool"]]],[11,"clone","","",13,[[["self"]],["subexpression"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"new","","",13,N],[11,"is_helper","","",13,[[["self"]],["bool"]]],[11,"as_element","","",13,[[["self"]],["templateelement"]]],[11,"name","","",13,[[["self"]],["str"]]],[11,"params","","",13,[[["self"]],["option",["vec"]]]],[11,"hash","","",13,[[["self"]],["option",["btreemap"]]]],[11,"eq","","",17,[[["self"],["blockparam"]],["bool"]]],[11,"ne","","",17,[[["self"],["blockparam"]],["bool"]]],[11,"clone","","",17,[[["self"]],["blockparam"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["expressionspec"]],["bool"]]],[11,"ne","","",14,[[["self"],["expressionspec"]],["bool"]]],[11,"clone","","",14,[[["self"]],["expressionspec"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["parameter"]],["bool"]]],[11,"ne","","",18,[[["self"],["parameter"]],["bool"]]],[11,"clone","","",18,[[["self"]],["parameter"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["helpertemplate"]],["bool"]]],[11,"ne","","",15,[[["self"],["helpertemplate"]],["bool"]]],[11,"clone","","",15,[[["self"]],["helpertemplate"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["directivetemplate"]],["bool"]]],[11,"ne","","",16,[[["self"],["directivetemplate"]],["bool"]]],[11,"clone","","",16,[[["self"]],["directivetemplate"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"into_name","","",18,[[["self"]],["option",["string"]]]],[11,"parse","","",18,[[["str"]],["result",["parameter","templateerror"]]]],[11,"new","","",12,[[["bool"]],["template"]]],[11,"compile","","",12,[[["s"]],["result",["template","templateerror"]]]],[11,"compile2","","",12,[[["s"],["bool"]],["result",["template","templateerror"]]]],[11,"compile_with_name","","",12,[[["s"],["string"],["bool"]],["result",["template","templateerror"]]]],[11,"eq","","",19,[[["self"],["templateelement"]],["bool"]]],[11,"ne","","",19,[[["self"],["templateelement"]],["bool"]]],[11,"clone","","",19,[[["self"]],["templateelement"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","handlebars","",4,[[["self"],["formatter"]],["result"]]],[11,"as_json","","get the JSON reference",4,[[["self"]],["json"]]],[11,"render","","",4,[[["self"]],["string"]]],[11,"from","","",4,[[["json"]],["scopedjson"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"new","","",20,[[["option",["string"]],["scopedjson"]],["pathandjson"]]],[11,"path","","Returns relative path when the value is referenced If the value is from a literal, the path is `None`",20,[[["self"]],["option",["string"]]]],[11,"path_root","","Return root level of this path if any",20,[[["self"]],["option",["str"]]]],[11,"value","","Returns the value",20,[[["self"]],["json"]]],[6,"HelperResult","","",N,N],[6,"EscapeFn","","This type represents an escape fn, that is a function who's purpose it is to escape potentially problematic characters in a string.",N,N],[8,"DecoratorDef","","Decorator Definition",N,N],[10,"call","","",21,[[["self"],["directive"],["registry"],["context"],["rendercontext"]],["result",["rendererror"]]]],[8,"HelperDef","","Helper Definition",N,N],[11,"call_inner","","",22,[[["self"],["helper"],["registry"],["context"],["rendercontext"]],["result",["option","rendererror"]]]],[11,"call","","",22,[[["self"],["helper"],["registry"],["context"],["rendercontext"],["output"]],["helperresult"]]],[8,"Output","","",N,N],[10,"write","","",23,[[["self"],["str"]],["result",["ioerror"]]]],[8,"Evaluable","","Evaluate directive or decorator",N,N],[10,"eval","","",24,[[["self"],["registry"],["context"],["rendercontext"]],["result",["rendererror"]]]],[8,"Renderable","","Render trait",N,N],[10,"render","","render into RenderContext's `writer`",25,[[["self"],["registry"],["context"],["rendercontext"],["output"]],["result",["rendererror"]]]],[11,"renders","","render into string",25,[[["self"],["registry"],["context"],["rendercontext"]],["result",["string","rendererror"]]]],[8,"JsonRender","","Render Json data with default format",N,N],[10,"render","","",26,[[["self"]],["string"]]],[14,"handlebars_helper","","Macro that allows you to quickly define a handlebars helper by passing a name and a closure.",N,N],[11,"call_inner","","",22,[[["self"],["helper"],["registry"],["context"],["rendercontext"]],["result",["option","rendererror"]]]],[11,"call","","",22,[[["self"],["helper"],["registry"],["context"],["rendercontext"],["output"]],["helperresult"]]],[11,"renders","","render into string",25,[[["self"],["registry"],["context"],["rendercontext"]],["result",["string","rendererror"]]]],[11,"expand_as_name","handlebars::template","",18,[[["self"],["registry"],["context"],["rendercontext"]],["result",["string","rendererror"]]]],[11,"expand","","",18,[[["self"],["registry"],["context"],["rendercontext"]],["result",["pathandjson","rendererror"]]]],[11,"render","","",12,[[["self"],["registry"],["context"],["rendercontext"],["output"]],["result",["rendererror"]]]],[11,"eval","","",12,[[["self"],["registry"],["context"],["rendercontext"]],["result",["rendererror"]]]],[11,"render","","",19,[[["self"],["registry"],["context"],["rendercontext"],["output"]],["result",["rendererror"]]]],[11,"eval","","",19,[[["self"],["registry"],["context"],["rendercontext"]],["result",["rendererror"]]]]],"paths":[[3,"RenderError"],[3,"TemplateError"],[4,"TemplateFileError"],[4,"TemplateRenderError"],[4,"ScopedJson"],[3,"Context"],[3,"Handlebars"],[3,"RenderContext"],[3,"Helper"],[3,"Decorator"],[3,"StringWriter"],[3,"TemplateMapping"],[3,"Template"],[3,"Subexpression"],[3,"ExpressionSpec"],[3,"HelperTemplate"],[3,"DirectiveTemplate"],[4,"BlockParam"],[4,"Parameter"],[4,"TemplateElement"],[3,"PathAndJson"],[8,"DecoratorDef"],[8,"HelperDef"],[8,"Output"],[8,"Evaluable"],[8,"Renderable"],[8,"JsonRender"]]};
searchIndex["horrorshow"]={"doc":"Horrorshow","items":[[3,"Error","horrorshow","",N,N],[12,"write","","",0,N],[12,"render","","",0,N],[3,"TemplateBuffer","","A template buffer. This is the type that gets passed to closures inside templates.",N,N],[3,"FnRenderer","","A template renderer. The `html! {}` macro returns a `FnRenderer`.",N,N],[3,"Raw","","Raw content marker.",N,N],[12,"0","","",1,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["error"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"record_error","","",2,[[["self"],["e"]]]],[11,"write_raw","","Write a raw string to the template output.",2,[[["self"],["str"]]]],[11,"write_fmt","","Escape and write the formatted arguments to the template output.",2,[[["self"],["arguments"]]]],[11,"write_str","","Escape and write a string to the template output.",2,[[["self"],["str"]]]],[11,"as_writer","","Returns an escaping Write adapter.",2,[[["self"]],["templatewriter"]]],[11,"as_raw_writer","","Returns a non-escaping Write adapter.",2,[[["self"]],["rawtemplatewriter"]]],[11,"new","","",3,[[["f"]],["self"]]],[11,"with_capacity","","",3,[[["usize"],["f"]],["self"]]],[11,"render_once","","",3,[[["self"],["templatebuffer"]]]],[11,"size_hint","","",3,[[["self"]],["usize"]]],[11,"render_mut","","",3,[[["self"],["templatebuffer"]]]],[11,"render","","",3,[[["self"],["templatebuffer"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["raw"]],["bool"]]],[11,"ne","","",1,[[["self"],["raw"]],["bool"]]],[11,"cmp","","",1,[[["self"],["raw"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["raw"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["raw"]],["bool"]]],[11,"le","","",1,[[["self"],["raw"]],["bool"]]],[11,"gt","","",1,[[["self"],["raw"]],["bool"]]],[11,"ge","","",1,[[["self"],["raw"]],["bool"]]],[11,"clone","","",1,[[["self"]],["raw"]]],[11,"render_once","","",1,[[["self"],["templatebuffer"]]]],[11,"size_hint","","",1,[[["self"]],["usize"]]],[11,"render_mut","","",1,[[["self"],["templatebuffer"]]]],[11,"render","","",1,[[["self"],["templatebuffer"]]]],[0,"prelude","","Traits that should always be imported.",N,N],[3,"FnRenderer","horrorshow::prelude","A template renderer. The `html! {}` macro returns a `FnRenderer`.",N,N],[3,"Raw","","Raw content marker.",N,N],[12,"0","","",1,N],[3,"TemplateBuffer","","A template buffer. This is the type that gets passed to closures inside templates.",N,N],[8,"Render","","Something that can be rendered by reference.",N,N],[10,"render","","Render this into a template buffer.",4,[[["self"],["templatebuffer"]]]],[8,"RenderBox","","Something that can be rendered once out of a box.",N,N],[8,"RenderMut","","Something that can be rendered by mutable reference.",N,N],[10,"render_mut","","Render this into a template buffer.",5,[[["self"],["templatebuffer"]]]],[8,"RenderOnce","","Something that can be rendered once.",N,N],[10,"render_once","","Render this into a template buffer.",6,[[["self"],["templatebuffer"]]]],[11,"size_hint","","Returns a (very) rough estimate of how many bytes this Render will use.",6,[[["self"]],["usize"]]],[8,"Template","","A template that can be rendered into something.",N,N],[11,"into_string","","Render this into a new String.",7,[[["self"]],["result",["string","error"]]]],[11,"write_to_string","","Render this into an existing String.",7,[[["self"],["string"]],["result",["error"]]]],[11,"write_to_fmt","","Render this into something that implements fmt::Write.",7,[[["self"],["write"]],["result",["error"]]]],[11,"write_to_io","","Render this into something that implements io::Write.",7,[[["self"],["write"]],["result",["error"]]]],[0,"helper","horrorshow","Helpers templates.",N,N],[0,"doctype","horrorshow::helper","Helpers for inserting `DOCTYPE`s.",N,N],[0,"HTML4","horrorshow::helper::doctype","HTML 4.01 doctypes",N,N],[17,"Strict","horrorshow::helper::doctype::HTML4","",N,N],[17,"Transitional","","",N,N],[17,"Frameset","","",N,N],[17,"HTML","horrorshow::helper::doctype","",N,N],[8,"Template","horrorshow","A template that can be rendered into something.",N,N],[11,"into_string","horrorshow::prelude","Render this into a new String.",7,[[["self"]],["result",["string","error"]]]],[11,"write_to_string","","Render this into an existing String.",7,[[["self"],["string"]],["result",["error"]]]],[11,"write_to_fmt","","Render this into something that implements fmt::Write.",7,[[["self"],["write"]],["result",["error"]]]],[11,"write_to_io","","Render this into something that implements io::Write.",7,[[["self"],["write"]],["result",["error"]]]],[8,"Render","horrorshow","Something that can be rendered by reference.",N,N],[10,"render","","Render this into a template buffer.",4,[[["self"],["templatebuffer"]]]],[8,"RenderBox","","Something that can be rendered once out of a box.",N,N],[8,"RenderMut","","Something that can be rendered by mutable reference.",N,N],[10,"render_mut","","Render this into a template buffer.",5,[[["self"],["templatebuffer"]]]],[8,"RenderOnce","","Something that can be rendered once.",N,N],[10,"render_once","","Render this into a template buffer.",6,[[["self"],["templatebuffer"]]]],[11,"size_hint","horrorshow::prelude","Returns a (very) rough estimate of how many bytes this Render will use.",6,[[["self"]],["usize"]]],[14,"html","horrorshow","Create a new html template",N,N],[14,"owned_html","","Create a new html template taking ownership of any variables used inside",N,N],[14,"box_html","","Create a new owned html template.",N,N],[14,"template","","Create a new template.",N,N],[14,"labels","","Utility macro for generating a space-delimited string from a set of labels; some of which may be conditionally included into the final string. Labels are anything that implements the `RenderOnce` trait (e.g. `String` or `&str`).",N,N],[14,"labels_sep_by","","Utility macro for generating a delimited string from a set of labels; some of which may be conditionally included into the final string. The delimiter/seperator and labels are anything that implements the `RenderOnce` trait (e.g. `String` or `&str`).",N,N],[11,"into_string","horrorshow::prelude","Render this into a new String.",7,[[["self"]],["result",["string","error"]]]],[11,"write_to_string","","Render this into an existing String.",7,[[["self"],["string"]],["result",["error"]]]],[11,"write_to_fmt","","Render this into something that implements fmt::Write.",7,[[["self"],["write"]],["result",["error"]]]],[11,"write_to_io","","Render this into something that implements io::Write.",7,[[["self"],["write"]],["result",["error"]]]],[11,"size_hint","","Returns a (very) rough estimate of how many bytes this Render will use.",6,[[["self"]],["usize"]]]],"paths":[[3,"Error"],[3,"Raw"],[3,"TemplateBuffer"],[3,"FnRenderer"],[8,"Render"],[8,"RenderMut"],[8,"RenderOnce"],[8,"Template"]]};
searchIndex["tera"]={"doc":"Tera Tera is a template engine based on Jinja2 and the Django template language.","items":[[5,"from_value","tera","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[3,"Map","","Represents a JSON key/value type.",N,N],[3,"Number","","Represents a JSON number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[3,"Context","","The struct that holds the context of a template rendering.",N,N],[3,"Error","","The Error type.",N,N],[12,"0","","The kind of the error.",1,N],[3,"Tera","","The main point of interaction in this library.",N,N],[4,"ErrorKind","","The kind of an error.",N,N],[13,"Msg","","A convenient variant for String.",2,N],[13,"Json","","An error happened while serializing JSON",2,N],[5,"escape_html","","Escape HTML following OWASP",N,[[["str"]],["string"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["context"]]],[11,"eq","","",3,[[["self"],["context"]],["bool"]]],[11,"ne","","",3,[[["self"],["context"]],["bool"]]],[11,"new","","Initializes an empty context",3,[[],["context"]]],[11,"insert","","Converts the `val` parameter to `Value` and insert it into the context",3,[[["self"],["str"],["t"]]]],[11,"extend","","Appends the data of the `source` parameter to `self`, overwriting existing keys. The source context will be dropped.",3,[[["self"],["context"]]]],[11,"default","","",3,[[],["context"]]],[11,"serialize","","",3,[[["self"],["s"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","",1,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",1,N],[11,"with_chain","","",1,[[["e"],["k"]],["self"]]],[11,"kind","","",1,N],[11,"iter","","",1,[[["self"]],["iter"]]],[11,"chain_err","","",1,[[["self"],["f"]],["self"]]],[11,"backtrace","","",1,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",1,[[["error"]],["option",["internalbacktrace"]]]],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",1,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",1,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",1,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",1,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",1,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",1,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",1,[[["self"],["f"]],["error"]]],[11,"description","","A short description of the error. This method is identical to `Error::description()`",1,[[["self"]],["str"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from","","",1,[[["error"]],["self"]]],[11,"from","","",1,[[["errorkind"]],["self"]]],[11,"from","","",1,[[["str"]],["self"]]],[11,"from","","",1,[[["string"]],["self"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","A string describing the error kind.",2,[[["self"]],["str"]]],[11,"from","","",2,[[["str"]],["self"]]],[11,"from","","",2,[[["string"]],["self"]]],[11,"from","","",2,[[["error"]],["self"]]],[11,"new","","Create a new instance of Tera, containing all the parsed templates found in the `dir` glob",4,[[["str"]],["result",["tera"]]]],[11,"parse","","Create a new instance of Tera, containing all the parsed templates found in the `dir` glob  The difference with `Tera::new` is that it won't build the inheritance chains automatically  so you are free to modify the templates if you need to.  You will NOT get a working Tera instance using `Tera::parse`, you will need to call  `tera.build_inheritance_chains()` to make it usable",4,[[["str"]],["result",["tera"]]]],[11,"build_inheritance_chains","","We need to know the hierarchy of templates to be able to render multiple extends level This happens at compile-time to avoid checking it every time we want to render a template This also checks for soundness issues in the inheritance chains, such as missing template or circular extends. It also builds the block inheritance chain and detects when super() is called in a place where it can't possibly work",4,[[["self"]],["result"]]],[11,"check_macro_files","","We keep track of macro files loaded in each Template so we can know whether one or them is missing and error accordingly before the user tries to render a template.",4,[[["self"]],["result"]]],[11,"render","","Renders a Tera template given an object that implements `Serialize`.",4,[[["self"],["str"],["t"]],["result",["string"]]]],[11,"one_off","","Renders a one off template (for example a template coming from a user input) given a `Context` or an object that implements `Serialize`.",4,[[["str"],["t"],["bool"]],["result",["string"]]]],[11,"add_raw_template","","Add a single template to the Tera instance",4,[[["self"],["str"],["str"]],["result"]]],[11,"add_raw_templates","","Add all the templates given to the Tera instance",4,[[["self"],["vec"]],["result"]]],[11,"add_template_file","","Add a single template from a path to the Tera instance. The default name for the template is the path given, but this can be renamed with the `name` parameter",4,[[["self"],["p"],["option",["str"]]],["result"]]],[11,"add_template_files","","Add several templates from paths to the Tera instance. The default name for the template is the path given, but this can be renamed with the second parameter of the tuple",4,[[["self"],["vec"]],["result"]]],[11,"register_filter","","Register a filter with Tera.",4,[[["self"],["str"],["filterfn"]]]],[11,"register_tester","","Register a tester with Tera.",4,[[["self"],["str"],["testerfn"]]]],[11,"register_global_function","","Register a global function with Tera.",4,[[["self"],["str"],["globalfn"]]]],[11,"register_function","","Register a function with Tera.",4,[[["self"],["str"],["globalfn"]]]],[11,"autoescape_on","","Select which suffix(es) to automatically do HTML escaping on, `[\".html\", \".htm\", \".xml\"]` by default.",4,[[["self"],["vec",["str"]]]]],[11,"set_escape_fn","","Set user-defined function which applied to a rendered content.",4,N],[11,"reset_escape_fn","","Reset escape function to default `tera::escape_html`.",4,[[["self"]]]],[11,"full_reload","","Re-parse all templates found in the glob given to Tera Use this when you are watching a directory and want to reload everything, for example when a file is added.",4,[[["self"]],["result"]]],[11,"extend","","Use that method when you want to add a given Tera instance templates/filters/testers  to your own. If a template/filter/tester with the same name already exists in your instance,  it will not be overwritten.",4,[[["self"],["tera"]],["result"]]],[11,"default","","",4,[[],["tera"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[6,"FilterFn","","The filter function type definition",N,N],[6,"GlobalFn","","The global function type definition",N,N],[6,"TesterFn","","The tester function type definition",N,N],[6,"Result","","Convenient wrapper around `std::Result`.",N,N],[14,"try_get_value","","Helper macro to get real values out of Value while retaining proper errors in filters",N,N],[14,"compile_templates","","Compile templates or exits process",N,N],[11,"new","","Makes a new empty Map.",5,[[],["map",["string","value"]]]],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",5,[[["usize"]],["map",["string","value"]]]],[11,"clear","","Clears the map, removing all values.",5,N],[11,"get","","Returns a reference to the value corresponding to the key.",5,[[["self"],["q"]],["option",["value"]]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",5,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",5,[[["self"],["q"]],["option",["value"]]]],[11,"insert","","Inserts a key-value pair into the map.",5,[[["self"],["string"],["value"]],["option",["value"]]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",5,[[["self"],["q"]],["option",["value"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",5,[[["self"],["s"]],["entry"]]],[11,"len","","Returns the number of elements in the map.",5,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",5,[[["self"]],["bool"]]],[11,"iter","","Gets an iterator over the entries of the map.",5,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",5,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map.",5,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map.",5,[[["self"]],["values"]]],[11,"values_mut","","Gets an iterator over mutable values of the map.",5,[[["self"]],["valuesmut"]]],[11,"clone","","",0,[[["self"]],["value"]]],[11,"clone","","",6,[[["self"]],["number"]]],[11,"clone","","",5,[[["self"]],["map",["string","value"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"into_iter","","",5,N],[11,"from_str","","",0,[[["str"]],["result",["value","error"]]]],[11,"from_str","","",6,[[["str"]],["result",["number"]]]],[11,"default","","",0,[[],["value"]]],[11,"default","","",5,[[],["map",["string","value"]]]],[11,"from_iter","","Convert an iteratable type to a `Value`",0,[[["i"]],["value"]]],[11,"from_iter","","",5,[[["t"]],["map",["string","value"]]]],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,[[["self"],["i"]],["value"]]],[11,"index_mut","","",5,[[["self"],["q"]],["value"]]],[11,"index","","",5,[[["self"],["q"]],["value"]]],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,[[["self"],["i"]],["value"]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",6,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",6,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",6,N],[11,"deserialize_enum","","",6,N],[11,"deserialize_identifier","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",6,[[["self"],["v"]],["result"]]],[11,"serialize","","",5,[[["self"],["s"]],["result"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"serialize","","",6,[[["self"],["s"]],["result"]]],[11,"deserialize","","",5,[[["d"]],["result",["map"]]]],[11,"deserialize","","",6,[[["d"]],["result",["number"]]]],[11,"deserialize","","",0,[[["d"]],["result",["value"]]]],[11,"from","","",0,[[["usize"]],["value"]]],[11,"from","","",6,[[["i32"]],["number"]]],[11,"from","","Convert 32-bit floating point number to `Value`",0,[[["f32"]],["value"]]],[11,"from","","",6,[[["i8"]],["number"]]],[11,"from","","Convert a `Vec` to `Value`",0,[[["vec"]],["value"]]],[11,"from","","Convert `String` to `Value`",0,[[["string"]],["value"]]],[11,"from","","",0,[[["u32"]],["value"]]],[11,"from","","",0,[[["isize"]],["value"]]],[11,"from","","Convert a slice to `Value`",0,N],[11,"from","","",6,[[["parsernumber"]],["number"]]],[11,"from","","",6,[[["u16"]],["number"]]],[11,"from","","",6,[[["usize"]],["number"]]],[11,"from","","",6,[[["u64"]],["number"]]],[11,"from","","",0,[[["u16"]],["value"]]],[11,"from","","Convert 64-bit floating point number to `Value`",0,[[["f64"]],["value"]]],[11,"from","","",0,[[["i8"]],["value"]]],[11,"from","","Convert copy-on-write string to `Value`",0,[[["cow",["str"]]],["value"]]],[11,"from","","",6,[[["i64"]],["number"]]],[11,"from","","",0,[[["u8"]],["value"]]],[11,"from","","Convert boolean to `Value`",0,[[["bool"]],["value"]]],[11,"from","","",0,[[["u64"]],["value"]]],[11,"from","","Convert map (with string keys) to `Value`",0,[[["map",["string","value"]]],["value"]]],[11,"from","","",0,[[["i64"]],["value"]]],[11,"from","","",0,[[["i32"]],["value"]]],[11,"from","","Convert string slice to `Value`",0,[[["str"]],["value"]]],[11,"from","","",0,[[["i16"]],["value"]]],[11,"from","","",6,[[["i16"]],["number"]]],[11,"from","","",6,[[["u32"]],["number"]]],[11,"from","","",6,[[["isize"]],["number"]]],[11,"from","","",6,[[["u8"]],["number"]]],[11,"extend","","",5,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","Display a JSON value as a string.",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",0,[[["self"],["i8"]],["bool"]]],[11,"eq","","",0,[[["self"],["u32"]],["bool"]]],[11,"eq","","",6,[[["self"],["number"]],["bool"]]],[11,"ne","","",6,[[["self"],["number"]],["bool"]]],[11,"eq","","",0,[[["self"],["i64"]],["bool"]]],[11,"eq","","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"eq","","",0,[[["self"],["string"]],["bool"]]],[11,"eq","","",0,[[["self"],["isize"]],["bool"]]],[11,"eq","","",0,[[["self"],["i32"]],["bool"]]],[11,"eq","","",0,[[["self"],["f32"]],["bool"]]],[11,"eq","","",0,[[["self"],["u16"]],["bool"]]],[11,"eq","","",0,[[["self"],["usize"]],["bool"]]],[11,"eq","","",0,[[["self"],["u8"]],["bool"]]],[11,"eq","","",0,[[["self"],["bool"]],["bool"]]],[11,"eq","","",0,[[["self"],["i16"]],["bool"]]],[11,"eq","","",0,[[["self"],["f64"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",5,[[["self"],["map"]],["bool"]]],[11,"eq","","",0,[[["self"],["u64"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",6,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",6,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",6,[[["self"]],["bool"]]],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",6,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",6,[[["self"]],["option",["u64"]]]],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",6,[[["self"]],["option",["f64"]]]],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",6,[[["f64"]],["option",["number"]]]],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,[[["self"]],["option"]]],[11,"pointer","","Looks up a value by a JSON Pointer.",0,[[["self"],["str"]],["option",["value"]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,[[["self"],["str"]],["option",["value"]]]],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,[[["self"]],["value"]]]],"paths":[[4,"Value"],[3,"Error"],[4,"ErrorKind"],[3,"Context"],[3,"Tera"],[3,"Map"],[3,"Number"]]};
initSearch(searchIndex);
